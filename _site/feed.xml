<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Browser Security Enhancements</title>
    <description>The browsers are currently implementing lots of changes day by day. We will be listing changes relevant to security enhancements which known browsers have implemented recently. Such security updates are aimed to be updated on regular intervals.
</description>
    <link>http://127.0.0.1:4000/</link>
    <atom:link href="http://127.0.0.1:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 21 May 2021 20:58:08 +0530</pubDate>
    <lastBuildDate>Fri, 21 May 2021 20:58:08 +0530</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Same-Site Cookie Attribute</title>
        <description>&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;Same-Site attribute can be used to prevent Cross-Site Request Forgery attacks. Browsers will not transmit the Same-Site cookie attribute if access from cross-origin which means we can prevent the Cross-Site Request Forgery attacks. However, an attacker can still use Cross-Site Scripting vulnerability and perform chaining attack to execute Cross-Site Request Forgery attack.&lt;/p&gt;

&lt;p&gt;We discussed how the Same-Site cookie attribute works. Now, let’s understand it with respect to Chrome and Firefox browsers. Same-Site cookie attribute supports 3 values Lax, Strict and None:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lax: Same-Site cookies marked with Lax are not sent on the cross-site requests, i.e. load images or frames into a third party application. However, it is being sent when a user is navigating to the site by following a link from the application.&lt;/li&gt;
  &lt;li&gt;Strict: Same-Site cookies marked with Strict will only be sent on first requests and not being sent with the requests originating by third party applications.&lt;/li&gt;
  &lt;li&gt;None: Same-Site cookies marked with None will not be sent to both first requests and cross-origin requests. However, if the application sets Same-Site with None, it is required to set a Secure attribute which makes sure that cookie will not be transferred over an unencrypted HTTP channel.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The browsers consider Lax as the default value if Same-Site attribute is not present for the particular cookie. This will ensure that Cross-Site Request Forgery will not be allowed when an attacker attempts to execute it by request from an attacker controlled application.&lt;/p&gt;

&lt;p&gt;Following is the list of browsers which supports Same-Site attribute(as of 25 February 2021):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Chrome 51, Some features are updated from Chrome 84&lt;/li&gt;
  &lt;li&gt;Firefox 60&lt;/li&gt;
  &lt;li&gt;Edge 16&lt;/li&gt;
  &lt;li&gt;Opera 39&lt;/li&gt;
  &lt;li&gt;Safari 13 on macOS 10.15 Catalina&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;browsers&quot;&gt;Browser(s)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Chrome 84+&lt;/li&gt;
  &lt;li&gt;Firefox 60+&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;Reference(s)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.chromium.org/updates/same-site/test-debug&quot;&gt;Same-Site attribure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 21 May 2021 13:15:00 +0530</pubDate>
        <link>http://127.0.0.1:4000/security/updates/2021/05/21/Same-Site-Cookie-Attribute.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/security/updates/2021/05/21/Same-Site-Cookie-Attribute.html</guid>
        
        
        <category>Security</category>
        
        <category>Updates</category>
        
      </item>
    
      <item>
        <title>Total Cookie protection in Firefox</title>
        <description>&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;Total Cookie Protection creates a separate “cookie jar” for each website the users visit in Firefox. Any time a website, or third-party content embedded in a website, deposits a cookie in your browser, that cookie is confined to the cookie jar assigned to that website, such that it is not allowed to be shared with any other website. For example, if the user accesses the website “www.notsosecure.com”, and it contains third party contents from “api.thirdpartycontents.com”. The browser will create a “cookie jar” and store both cookies “www.notsosecure.com” and “api.thirdpartycontents.com” to the “cookie jar” of “www.notsosecure.com” - the first web application which users accessed. If the user accesses another application which uses any of the above applications, the browser will not use the cookie and create a new cookie jar for each application the user visits.&lt;/p&gt;

&lt;p&gt;How will this affect normal users? The applications which support Sign in with Google, Facebook or any other applications will not allow to access the applications directly with the existing cookies. Instead of this, the applications will ask users to sign again to their provider and use the cookies separately.&lt;/p&gt;

&lt;p&gt;Addtionally, Enhanced Tracking Protection is the default setting for Firefox users and will block the following trackers:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Cross-site cookies&lt;/li&gt;
  &lt;li&gt;Social media trackers&lt;/li&gt;
  &lt;li&gt;Cryptominers&lt;/li&gt;
  &lt;li&gt;Tracking content in private windows&lt;/li&gt;
  &lt;li&gt;Fingerprinters&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;browsers&quot;&gt;Browser(s)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Firefox 86+&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;Reference(s)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mozilla.org/security/2021/02/23/total-cookie-protection/&quot;&gt;Total Cookie Protection in Firefox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 20 May 2021 11:45:20 +0530</pubDate>
        <link>http://127.0.0.1:4000/security/updates/2021/05/20/Total-Cookie-Protection.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/security/updates/2021/05/20/Total-Cookie-Protection.html</guid>
        
        
        <category>Security</category>
        
        <category>Updates</category>
        
      </item>
    
      <item>
        <title>Tabnabbing Protection</title>
        <description>&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;Reverse tabnabbing is an attack where an attacker can link a malicious page on the target application. The malicious page is able to rewrite the target application, for example to replace it with a phishing site. As the user was originally on the correct page they are less likely to notice that it has been changed with a phishing site, especially if the site looks the same as the target. If the user authenticates to this phishing site then their credentials (or other sensitive data) are sent to the phishing site rather than the legitimate one.&lt;/p&gt;

&lt;p&gt;The following list of properties can be accessed by a malicious application:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;opener.closed: Returns a boolean value indicating whether a window has been closed or not.&lt;/li&gt;
  &lt;li&gt;opener.frames: Returns all iframe elements in the current window.&lt;/li&gt;
  &lt;li&gt;opener.length: Returns the number of iframe elements in the current window.&lt;/li&gt;
  &lt;li&gt;opener.opener: Returns a reference to the window that created the window.&lt;/li&gt;
  &lt;li&gt;opener.parent: Returns the parent window of the current window.&lt;/li&gt;
  &lt;li&gt;opener.self: Returns the current window.&lt;/li&gt;
  &lt;li&gt;opener.top: Returns the topmost browser window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, the browsers recently added Tabnabbing protection and no longer allows access to the properties mentioned above. To prove it let’s see an example mentioned below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a target=&quot;_blank&quot; href=&quot;https://attacker.com&quot;&amp;gt;Click Here! &amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As browsers prevent Tabnabbing vulnerability and do not disclose “windows.opener” information to opener page, this shows a NULL response.&lt;/p&gt;

&lt;p&gt;So, we can say that the browsers eliminated the Tabnabbing vulnerability by securing opener information. 
Additionally, if you want to opt out from Tabnabbing prevention, the web pages can use rel=”opener” as shown below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a target=&quot;_blank&quot; href=&quot;https://notsosecure.com&quot; rel=&quot;opener&quot;&amp;gt;Click!&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;browsers&quot;&gt;Browser(s)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Chrome 88+&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;Reference(s)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.chromestatus.com/features/6140064063029248&quot;&gt;Anchor target=_blank implies rel=noopener by default&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://html.spec.whatwg.org/#following-hyperlinks&quot;&gt;HTML Updates - Following hyperlinks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 19 May 2021 18:25:06 +0530</pubDate>
        <link>http://127.0.0.1:4000/security/updates/2021/05/19/Tabnabbing-Protection.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/security/updates/2021/05/19/Tabnabbing-Protection.html</guid>
        
        
        <category>Security</category>
        
        <category>Updates</category>
        
      </item>
    
      <item>
        <title>Cracking Down the Super Cookies in Firefox</title>
        <description>&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;Supercookies is just a term which is used in the case of Privacy trackers. Privacy trackers are third-party applications which store the user identification details. Firefox introduced a new feature which implemented partitioning network state and caches.&lt;/p&gt;

&lt;p&gt;Using a separate network states and caches for each new website the user accesses, makes the application more secure and prevents Cross-Site Tracking.&lt;/p&gt;

&lt;p&gt;While the move is a positive addition for privacy-conscious users, there are concerns that partitioning will affect the browser’s performance.&lt;/p&gt;

&lt;p&gt;Mozilla claims that its metrics show a “very modest impact” on page load time “between a 0.09% and 0.75% increase at the 80th percentile and below, and a maximum increase of 1.32% at the 85th percentile”.&lt;/p&gt;

&lt;h2 id=&quot;browsers&quot;&gt;Browser(s)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Firefox 85+&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;Reference(s)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mozilla.org/security/2021/01/26/supercookie-protections/&quot;&gt;Cracks Down on SuperCookies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 18 May 2021 16:45:20 +0530</pubDate>
        <link>http://127.0.0.1:4000/security/updates/2021/05/18/Super-Cookie.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/security/updates/2021/05/18/Super-Cookie.html</guid>
        
        
        <category>Security</category>
        
        <category>Updates</category>
        
      </item>
    
      <item>
        <title>HTTPS-Only Mode</title>
        <description>&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;The browser allows users to change the HTTPS-Only mode preferences. This is a security enhancement which restricts users from accessing HTTP applications in the case. However, there are a couple of caveats to discuss about this feature.&lt;/p&gt;

&lt;p&gt;HTTPS-Only mode is a great security enhancement as it will not allow HTTP requests to pass through the browser, but what about the web applications which only supports HTTP and the connection cannot be upgraded. If HTTPS-Only Mode is enabled and a HTTPS version of a site is not available, users will see a “Secure Connection Not Available” page which can be accessible after accepting the risk warning. HTTPS-Only Mode will be turned off temporarily for that site.&lt;/p&gt;

&lt;p&gt;Anyway it can be self-understandable that if the application uses the “Strict-Transport-Security” header, the browsers do not allow the users to access HTTP applications. Security concerned web applications can always set “Strict-Transport-Security” which prevents requests to HTTP. To avoid the first request over HTTP while using “Strict-Transport-Security”, the domains can be added to the preload list of web browsers.&lt;/p&gt;

&lt;h2 id=&quot;browsers&quot;&gt;Browser(s)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Firefox 83+&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;Reference(s)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mozilla.org/security/2020/11/17/firefox-83-introduces-https-only-mode/&quot;&gt;HTTPS-Only Mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 17 May 2021 16:20:06 +0530</pubDate>
        <link>http://127.0.0.1:4000/security/updates/2021/05/17/HTTP-Only-Mode.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/security/updates/2021/05/17/HTTP-Only-Mode.html</guid>
        
        
        <category>Security</category>
        
        <category>Updates</category>
        
      </item>
    
      <item>
        <title>Referrer Leakage Prevention</title>
        <description>&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;Referrer Policy is used to prevent referer header leakage. Chrome has changed a referrer policy defaults and is now using “strict-origin-when-cross-origin” as the default policy, instead of “no-referrer-when-downgrade”. On cross-origin requests made from the web page without a referrer policy set on it, default configuration of Chrome will set “strict-origin-when-cross-origin” and prevent the Referer header leakage by disclosing initiating origin only instead of full URL.&lt;/p&gt;

&lt;p&gt;Let’s take an example, Cross-origin request, sent from https://notsosecure.com/user/profile?email=test9@notsosecure.com to https://notsosecureapp.com/:&lt;/p&gt;

&lt;p&gt;Previous default settings: “no-referrer-when-downgrade”, the Referer header with value “https://notsosecure.com/user/profile?email=test9@notsosecure.com” will be sent.&lt;/p&gt;

&lt;p&gt;Now in Chrome 85+ with default settings “strict-origin-when-cross-origin”, the Referer header with value “https://notsosecure.com” will be sent.&lt;/p&gt;

&lt;h2 id=&quot;browsers&quot;&gt;Browser(s)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Chrome 85+&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;Reference(s)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.chromestatus.com/features/6140064063029248&quot;&gt;Referrer Policy: Default to strict-origin-when-cross-origin
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 16 May 2021 18:26:06 +0530</pubDate>
        <link>http://127.0.0.1:4000/security/updates/2021/05/16/Referrer-Leakage-Prevention.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/security/updates/2021/05/16/Referrer-Leakage-Prevention.html</guid>
        
        
        <category>Security</category>
        
        <category>Updates</category>
        
      </item>
    
      <item>
        <title>X-XSS-Protection - Legacy Header</title>
        <description>&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;The security feature by implementing the “X-XSS-Protection” header was used to prevent Cross-Site Scripting attack. This feature was mostly used in Internet Explorer, Chrome and Safari. X-XSS-Protection header restricted the execution of Reflected Cross-Site Scripting attacks. Nowadays, Content-Security-Policy is widespread and disables the use of inline JavaScript (‘unsafe-inline’) and eliminates the use of X-XSS-Protection header.&lt;/p&gt;

&lt;p&gt;Currently, Chrome, Firefox and Edge no longer support the header “X-XSS-Protection”. This also means that the applications which were only using the “X-XSS-Protection” header are now unsafe from Cross-Site Scripting. It is recommended to switch to the latest security features such as Content-Security-Policy to prevent Cross-Site Scripting exploitation.&lt;/p&gt;

&lt;h2 id=&quot;browsers&quot;&gt;Browser(s)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Chrome 78+&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;Reference(s)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection&quot;&gt;X-XSS-Protection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 15 May 2021 19:25:00 +0530</pubDate>
        <link>http://127.0.0.1:4000/security/updates/2021/05/15/X-XSS-Protection.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/security/updates/2021/05/15/X-XSS-Protection.html</guid>
        
        
        <category>Security</category>
        
        <category>Updates</category>
        
      </item>
    
      <item>
        <title>Welcome to Browser Security Enhancements!</title>
        <description>&lt;p&gt;The browsers are currently implementing lots of changes day by day. We will be listing changes relevant to security enhancements which known browsers have implemented recently. To name a few, we will be discussing about the changes such as Tabnabbing protection, Referrer Leakage Preventions, HTTPS-Only mode, X-XSS-Protection and Cookie related security enhancement which can be used to prevent Client-Side vulnerabilities such as Cross-Site Scripting and Cross-Site Request Forgery. Security updates are aimed to be updated on regular intervals.&lt;/p&gt;

</description>
        <pubDate>Tue, 11 May 2021 18:23:06 +0530</pubDate>
        <link>http://127.0.0.1:4000/welcome/2021/05/11/Welcome-to-Browser-Security-Enhancements.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/welcome/2021/05/11/Welcome-to-Browser-Security-Enhancements.html</guid>
        
        
        <category>Welcome</category>
        
      </item>
    
  </channel>
</rss>
